<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2010 Square, Inc. -->

<!--
  - Builds the Retrofit project, relying on Apache Ivy to download external
  - dependencies.
  -
  - Retrofit is divided into modules, all of which are built from this single
  - Ant buildfile. The directory structure is as follows:
  -
  -  [project root]
  -    modules
  -      [module]
  -        src
  -        src-tests
  -->
<project
    xmlns:ivy="antlib:org.apache.ivy.ant"
    name="Retrofit" basedir="." default="dist">

  <!--
    - The Retrofit version number, becomes part of the JAR file names.
    -->
  <property name="retrofit.revision" value="0.1"/>

  <property name="ivy.install.version" value="2.2.0"/>
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME"/>
  </condition>
  <property name="ivy.home" value="${user.home}/.ant"/>
  <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

  <property name="build.dir" location="build"/>

  <property name="testreports.dir" location="${build.dir}/testreports"/>

  <!--
    - Gets Ivy from the public Maven repo so we don't need a custom Ant
    - installation.
    -->
  <target name="download-ivy" unless="offline">
    <mkdir dir="${ivy.jar.dir}"/>
    <get
        src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
        dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init-ivy" depends="download-ivy">
    <!--
      - Try to load ivy here from ivy home, in case the user has not already
      - dropped it into ant's lib dir (note that the latter copy will always
      - take precedence). We will not fail as long as local lib dir exists (it
      - may be empty) and ivy is in at least one of ant's lib dir or the local
      - lib dir.
      -->
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>

    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <target name="prepare" depends="init-ivy">
    <tstamp>
      <!-- ISO 8601 format: 2010-06-02T15:25:45Z -->
      <format property="build.time" timezone="GMT"
              pattern="yyyy-MM-dd'T'HH:mm:ss'Z'"/>
      <format property="build.year" timezone="GMT"
              pattern="yyyy"/>
    </tstamp>

    <!--
      - Assigns the git commit hash to the 'commit.hash' property, sending
      - errors to the Ant log.
      -->
    <exec executable="git"
          outputproperty="commit.hash"
          failifexecutionfails="false"
          logerror="true">
      <arg value="log"/>
      <arg value="-n1"/>
      <arg value="--pretty=format:%H"/>
    </exec>

    <!-- Downloads dependencies and places JARs under lib. -->
    <ivy:retrieve/>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>

  <target name="compile" depends="prepare">
    <build.module module="util"/>
  </target>

  <!--
    - Reusable macro to compile a module and create its JARs. Assumes each
    - module has this directory structure:
    -  modules
    -   \
    -   [modulename]
    -    \src
    -    \src-tests
    -->
  <macrodef name="build.module">
    <attribute name="module"
               description="The directory name under 'modules'."/>
    <element name="compile.main.classpath" optional="true"/>
    <element name="compile.tests.classpath" optional="true"/>

    <sequential>
      <mkdir dir="${build.dir}/@{module}/main"/>

      <!-- Compile src/* and place classes in build/[module]/main. -->
      <javac srcdir="modules/@{module}/src"
             destdir="${build.dir}/@{module}/main"
             fork="true"
             debug="true"
             includeantruntime="false">
        <classpath>
          <fileset dir="lib" includes="*.jar"/>
          <compile.main.classpath/>
        </classpath>
      </javac>

      <!-- Compile src-tests/* and place classes in build/[module]/tests. -->
      <mkdir dir="${build.dir}/@{module}/tests"/>
      <javac srcdir="modules/@{module}/src-tests"
             destdir="${build.dir}/@{module}/tests"
             fork="true"
             debug="true"
             includeantruntime="false">
        <classpath>
          <fileset dir="lib" includes="*.jar"/>
          <pathelement location="${build.dir}/@{module}/main"/>
          <compile.tests.classpath/>
        </classpath>
      </javac>

      <!-- Create the JAR files. -->
      <jar jarfile="${build.dir}/retrofit-@{module}-${retrofit.revision}.jar">
        <manifest>
          <attribute name="Build-Time" value="${build.time}"/>
          <attribute name="Copyright"
                     value="${build.year}, Square, Inc."/>
          <attribute name="Commit-Hash" value="${commit.hash}"/>
        </manifest>
        <fileset dir="${build.dir}/@{module}/main"/>
      </jar>

      <jar jarfile="${build.dir}/retrofit-@{module}-${retrofit.revision}-src.jar">
        <manifest>
          <attribute name="Build-Time" value="${build.time}"/>
          <attribute name="Copyright"
                     value="${build.year}, Square, Inc."/>
          <attribute name="Commit-Hash" value="${commit.hash}"/>
        </manifest>
        <fileset dir="modules/@{module}/src"/>
      </jar>

    </sequential>
  </macrodef>

  <target name="require.tests"
      description="Sets a property so test failures abort the build.">
    <property name="require.tests" value="true"/>
  </target>


  <target name="test" depends="compile" description="Runs tests.">
    <mkdir dir="${testreports.dir}"/>

    <!--
      - If this property isn't already set, assume broken tests should not
      - abort the build.
      -->
    <property name="require.tests" value="false"/>

    <junit printsummary="true" haltonfailure="${require.tests}">
      <classpath>
        <pathelement location="${build.dir}/util/main"/>
        <pathelement location="${build.dir}/util/tests"/>
        <fileset dir="lib" includes="*.jar"/>
      </classpath>

      <formatter type="xml"/>

      <batchtest todir="${testreports.dir}">
        <fileset dir="modules/util/src-tests">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${testreports.dir}">
      <fileset dir="${testreports.dir}" includes="TEST-*.xml"/>

      <report todir="${testreports.dir}"/>
    </junitreport>

    <echo message="${line.separator}Test report written to:${line.separator}${testreports.dir}/index.html"/>

  </target>


  <target name="dist" depends="require.tests,test"
          description="Compiles, ensures tests pass, and creates all deliverables.">
  </target>

</project>

